class Person {
  // インスタンスメソッドを定義 [START] ========================================
  // インスタンスフィールドの定義 [START] ---------------------------------------
  // インスタンスフィールドは、情報を格納しておく変数にすぎません。その変数はクラスの一番上に定義します。注意点として、「public データ型
  // 変数名」というように、変数定義の前にpublicを付けてあげましょう。
  public String name;

  // インスタンスフィールドへの値のセット [START] ========================================
  // ここまではインスタンスを生成してから、nameフィールドの値をセットしてきましたが、これはインスタンスフィールドが増えると面倒になりそうです。
  // コンストラクタ
  // クラスには、コンストラクタというものがあります。コンストラクタとは、newを使ってインスタンスを生成した後に自動で呼び出される特別なメソッドです。
  // コンストラクタの定義
  // コンストラクタは特別なメソッドのため、定義方法が決まっています。
  // ①コンストラクタ名はクラス名と同じにする
  // ②戻り値を書いてはいけない（voidも書かない）という2つの決まりを守りましょう。この2つさえ守れば、コンストラクタの完成です。
  // コンストラクタを定義してください
  Person() {
    System.out.println("インスタンスが生成されました");
  }
  // インスタンスフィールドへの値のセット [END] ==========================================

  // インスタンスフィールドの定義 [END] -----------------------------------------
  // インスタンスの振る舞いは、プログラム上ではメソッドで表現します。このインスタンスのメソッドのことをインスタンスメソッドと呼びます。インスタンスメソッドは「public
  // 戻り値の型 メソッド名()」と定義します
  public void hello() {
    // メソッド内でインスタンスフィールドにアクセスするためには「this」という特殊な変数を用います。
    // thisはクラス内のメソッドの定義の中でのみ使用できます。
    // thisはメソッドが呼ばれた時に、そのメソッドを呼び出しているインスタンスに置き換えられます。
    System.out.println("こんにちわ、私は" + this.name + "です");
  }
  // インスタンスメソッドを定義 [END] ==========================================

}
